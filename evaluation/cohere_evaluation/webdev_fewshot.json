[
    {
        "function": "const changepassword = async (req, res) => { try { const { id, oldPassword, newPassword, reenterNewPassword } = req.body; console.log(\"bodyr\",req.body); const userExist = await User.findById(id); if (!userExist) { return res.status(400).json({ message: \"Invalid credentials\" }); } const isOldPasswordValid = await userExist.comparePassword(oldPassword); if (!isOldPasswordValid) { return res.status(400).json({ message: \"Password is not correct.\" }); } if (newPassword !== reenterNewPassword) { return res.status(400).json({ message: \"Password is not correct.\" }); } userExist.password = newPassword; userExist.cpassword = reenterNewPassword; await userExist.save(); return res.status(200).json({ message: \"Password changed successfully\" }); } catch (error) { res.status(500).json({ message: \"Internal server error\" }); } };",
        "prompt_type": "Few-Shot",
        "cohere_summary": "The `changepassword` function is an asynchronous function that handles a request to change a user's password. Here's a summary of the function:\n\nThe function takes two parameters, `req` and `res`, which are typically used in Express/Node.js to represent the request and response objects, respectively.\n\nInside the function:\n1. It extracts the `id`, `oldPassword`, `newPassword`, and `reenterNewPassword` fields from the request body.\n2. It checks if a user with the given ID exists in the database using `User.findById(id)`.\n3. If the user does not exist, it returns a response with a status of 400 (Bad Request) and a message indicating invalid credentials.\n4. It then verifies if the provided old password is correct by using `userExist.comparePassword(oldPassword)`.\n5. If the old password is incorrect, it returns a response with a status of 400 (Bad Request) and a message indicating that the password is not correct.\n6. The function also checks if the `newPassword` and `reenterNewPassword` fields match. If they don't, it returns a similar response indicating an incorrect password.\n7. If all validations pass, the function updates the user's password and confirmed password fields with the new values.\n8. It then saves the updated user to the database using `userExist.save()`.\n9. Finally, it returns a response with a status of 200 (OK) and a message indicating that the password has been changed successfully.\n\nIn case of any errors during the execution of the function, it catches the error and returns a response with a status of 500 (Internal Server Error) and a message indicating an internal server error.\n\nOverall, this function securely handles the process of changing a user's password, including validation of the old password, confirmation of the new password, and updating the user's information in the database.",
        "reference_summary": "Change the password for a user after validating old credentials\n@param {Object} req - Express request containing user ID and passwords\n@param {Object} res - Express response\n@returns {Object} - JSON response message"
    },
    {
        "function": "const getFutureAppointmentsForOneUser = async (req, res) => { const { id } = req.params; try { console.log(id); const futureAppointments = await Appointment.find({ date: { $gte: new Date() }, user: id }).populate('doctor', 'name'); if (!futureAppointments || futureAppointments.length === 0) { return res.status(404).json({ message: \"No appointment Found\" }); } return res.status(200).json(futureAppointments); } catch (error) { res.status(500).json({ message: \"Internal server error\" }); } };",
        "prompt_type": "Few-Shot",
        "cohere_summary": "Here is a summary of the function:\n\nFunction Name: getFutureAppointmentsForOneUser\n\nPurpose: This function retrieves future appointments for a specific user from the database.\n\nParameters:\n- req: The request object containing the user ID in the params.\n- res: The response object used to send back data or status codes.\n\nFunctionality:\n1. It extracts the user ID from the request params.\n2. It uses the Appointment model to find future appointments where the date is greater than or equal to the current date and are associated with the specified user ID.\n3. The doctor field in the appointments is populated with the doctor's name.\n4. If no future appointments are found, it returns a 404 status code with a \"No appointment Found\" message.\n5. If future appointments are found, it returns a 200 status code along with the appointments data.\n6. In case of any errors, it catches the exception and returns a 500 status code with an \"Internal server error\" message.\n\nSummary: The getFutureAppointmentsForOneUser function retrieves and returns future appointments for a specific user, handling potential errors and providing appropriate status codes in the response.",
        "reference_summary":"Fetch future appointments for a specific user\n@param {Object} req - Express request with user ID\n@param {Object} res - Express response\n@returns {Object} - JSON response with appointments or error message"
    },
    {
        "function": "const handleDoctorSelection = (event) => { const selectedDoctorId = event.target.value; setSelectedDoctor(selectedDoctorId); const doctor = doctors.find((doc) => doc._id === selectedDoctorId); setFormData({ ...formData, doctor: selectedDoctorId, time: { startTime: '', endTime: '' } }); if (doctor) { setAvailableTimeSlots(doctor.availableTime); } else { setAvailableTimeSlots([]); } };",
        "prompt_type": "Few-Shot",
        "cohere_summary": "The `handleDoctorSelection` function is a JavaScript function that handles the selection of a doctor from a list of available doctors. Here's a summary of the function:\n\n**Function Name:** handleDoctorSelection\n\n**Purpose:** This function is triggered when a user selects a doctor from a list, and it updates the state of the application accordingly.\n\n**Parameters:**\n- `event`: The event object passed by the user interaction, such as a click or change event.\n\n**Functionality:**\n1. It extracts the selected doctor's ID from the event target's value.\n2. It updates the `selectedDoctor` state with the selected doctor's ID.\n3. It finds the selected doctor's object from the `doctors` array based on the ID.\n4. It updates the `formData` state with the selected doctor's ID and resets the startTime and endTime to empty strings.\n5. If a doctor is found, it updates the `availableTimeSlots` state with the selected doctor's available time slots. If no doctor is found, it sets the `availableTimeSlots` to an empty array.\n\n**Summary:** The `handleDoctorSelection` function responds to a user's selection of a doctor, updates the application state, and prepares the necessary data for further processing or display.",
        "reference_summary":"Handle doctor selection from dropdown and update form data\n@param {Object} event - Change event from the doctor selection input"
    },
    {
        "function": "const totalCountPatients = async (req, res) => { try { const totalPatients = await User.countDocuments({ type: \"patient\" }); res.status(200).json({ totalPatients }); } catch (error) { console.error(\"Error retrieving total patients:\", error); res.status(500).json({ error: \"Internal Server Error\" }); } };",
        "prompt_type": "Few-Shot",
        "cohere_summary": "Here is a summary of the given function:\n\nFunction Name: totalCountPatients\n\nPurpose: This function is used to retrieve the total count of patients from a database.\n\nInput Parameters:\n- req: Represents the request object, typically containing information about the incoming request.\n- res: Represents the response object, used to send a response back to the client.\n\nFunctionality:\n1. Inside the function, an asynchronous operation is performed to count the number of documents in the database with the type \"patient\".\n2. The count is stored in the variable totalPatients.\n3. If the operation is successful, a response with a status code of 200 (OK) and the total patient count is sent back to the client in JSON format.\n4. If an error occurs during the asynchronous operation, an error message is logged to the console, and a response with a status code of 500 (Internal Server Error) and an error message is sent back to the client.\n\nSummary: The totalCountPatients function asynchronously retrieves the total count of patients from the database and responds with the count or an error message depending on the operation's success or failure.",
        "reference_summary":"Count total patients in the system\n@param {Object} req - Express request\n@param {Object} res - Express response\n@returns {Object} - JSON response with patient count"
    },
    {
        "function": "const handleTimeSelection = (event) => { const selectedTime = event.target.value; const timeSlot = doctor.availableTime.find(slot => slot._id === selectedTime); console.log(\"Timeslott\", timeSlot); setFormData({ ...formData, doctor: doctor._id, time: timeSlot }); };",
        "prompt_type": "Few-Shot",
        "cohere_summary": "The function `handleTimeSelection` is an event handler that is triggered when a time selection event occurs. It takes an event object as its parameter. Here's a summary of the function:\n\nPurpose:\nThe purpose of the `handleTimeSelection` function is to handle the user's selection of a time slot and update the form data accordingly.\n\nParameters:\n- `event`: This parameter represents the event object that is passed to the event handler when the event occurs. In this case, it is likely triggered by a user interaction, such as selecting a time from a dropdown or clicking on a time option.\n\nFunctionality:\n1. It extracts the selected time value from the event target (`event.target.value`).\n2. It finds the corresponding time slot in the `doctor.availableTime` array by matching the `_id` property with the selected time value.\n3. It logs the selected time slot to the console for debugging purposes.\n4. It updates the `formData` object by spreading the existing `formData` and adding/updating the `doctor` and `time` properties with the selected doctor's ID and the selected time slot, respectively.\n\nThe function is likely used in a user interface where a user can select a time slot for an appointment with a doctor. It ensures that the selected time slot is valid and updates the form data to reflect the user's choice.",
        "reference_summary":"Handle time slot selection for appointment booking\n@param {Object} event - Event triggered by time slot selection"
    }
]